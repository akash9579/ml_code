# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19U13Lwpl1TilILABqe6K5heYon-4o8Pi
"""

import pandas as pd
import numpy as np
import seaborn as sns

data=pd.read_csv('train.csv')

data1=pd.read_csv('test.csv')



data.head()

type(data)

data['MSZoning'].value_counts()

sns.heatmap(data.isnull(),yticklabels=False,cbar=False)

data.shape

data1.shape

train = data.copy()

test = data1.copy()

train.head()

target=train.pop('SalePrice')

target

#train.drop('SalePrice',axis=0) # for droping column

df = pd.concat([train,test],axis=0)

df.shape

"""apply the feature enginerring"""

df.head()

sns.heatmap(df.isnull(),yticklabels=False,cbar=False)

type(df)

df.isna()

df.drop(['Alley'],axis=1,inplace=True)

df.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)

sns.heatmap(df.isnull(),yticklabels=False,cbar=False)



df['LotFrontage']=df['LotFrontage'].fillna(df['LotFrontage'].mean())

df['BsmtCond']=df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])
df['BsmtQual']=df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])

df['FireplaceQu']=df['FireplaceQu'].fillna(df['FireplaceQu'].mode()[0])
df['GarageType']=df['GarageType'].fillna(df['GarageType'].mode()[0])

df.drop(['GarageYrBlt'],axis=1,inplace=True)

df['GarageFinish']=df['GarageFinish'].fillna(df['GarageFinish'].mode()[0])
df['GarageQual']=df['GarageQual'].fillna(df['GarageQual'].mode()[0])
df['GarageCond']=df['GarageCond'].fillna(df['GarageCond'].mode()[0])

sns.heatmap(df.isnull(),yticklabels=False,cbar=False)



df.drop(['Id'],axis=1,inplace=True)

df.isnull().sum()

df.isnull().describe()

df['MSZoning'].isna()

df['MasVnrType']=df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])
df['MasVnrArea']=df['MasVnrArea'].fillna(df['MasVnrArea'].mode()[0])
df['BsmtExposure']=df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0])
df['BsmtFinType2']=df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0])

sns.heatmap(df.isnull(),yticklabels=False,cbar=False)

df.isna().any()

nan_cols = [i for i in df.columns if df[i].isnull().any()]   #best way to find which colums having nan values

nan_cols



nan_cols[0]

len(nan_cols)

for i in range (len(nan_cols)):
  df[nan_cols[i]]=df[nan_cols[i]].fillna(df[nan_cols[i]].mode()[0])

# Python3 code to iterate over a list 
list = [1, 3, 5, 7, 9] 
   
# Using list comprehension 
[print(i) for i in list]

sns.heatmap(df.isnull(),yticklabels=False,cbar=False)

df.dtypes

cat_features=[i for i in df.columns if df.dtypes[i]=='object']    #find the categorial features



cat_features

len(cat_features)

df.SaleType.value_counts().sort_values(ascending=False).head(15)

df.SaleType.value_counts()                      #checking the total count

final_df = df.copy()

def category_onehot_multcols(multcolumns):
    df_final=final_df
    i=0
    for fields in multcolumns:
        
        print(fields)
        df1=pd.get_dummies(final_df[fields],drop_first=True)
        
        final_df.drop([fields],axis=1,inplace=True)
        if i==0:
            df_final=df1.copy()
        else:
            
            df_final=pd.concat([df_final,df1],axis=1)
        i=i+1
       
        
    df_final=pd.concat([final_df,df_final],axis=1)
        
    return df_final

final_df=category_onehot_multcols(cat_features)

final_df

final_df =final_df.loc[:,~final_df.columns.duplicated()]

final_df.shape

df_Train=final_df.iloc[:1460,:]
df_Test=final_df.iloc[1460:,:]

df_Train.shape

target.shape

import xgboost
regressor=xgboost.XGBRegressor()

regressor.fit(df_Train,target)

import pickle
filename = 'finalized_model.pkl'
pickle.dump(classifier, open(filename, 'wb'))

df_Test.shape

df_Test

y_pred=regressor.predict(df_Test)

y_pred

pred=pd.DataFrame(y_pred)
sub_df=pd.read_csv('sample_submission.csv')

datasets=pd.concat([sub_df['Id'],pred],axis=1)
datasets.columns=['Id','SalePrice']
datasets.to_csv('sample_submission1.csv',index=False)